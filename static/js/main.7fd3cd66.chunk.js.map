{"version":3,"sources":["Items.js","App.js","serviceWorker.js","index.js"],"names":["Items","props","useState","quantity","setQuantity","className","cursor","Key","onClick","value","readOnly","style","margin","deleteItem","App","newItem","setNewItem","items","setItems","grabbed","setGrabbed","list","map","item","i","key","newList","splice","handleMove","newOrder","temp","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAmCeA,MAhCf,SAAeC,GAAM,MAGaC,mBAAS,GAHtB,mBAGZC,EAHY,KAGFC,EAHE,KAanB,OACE,yBAAKC,UAAU,QACb,wBACEA,UAAU,OACVC,OAAO,WAKNL,EAAMD,MAAMC,EAAMM,MAErB,4BAAQC,QAAS,WAdnBJ,EAAYD,EAAS,KAcnB,KACA,2BAAOE,UAAU,WAAWI,MAAON,EAAUO,UAAQ,IACrD,4BAAQF,QAAS,kBAAqBP,EAAMM,SApB9CH,EAAYD,EAAS,KAoBnB,KACA,4BAAQQ,MAAO,CAACC,OAAQ,OAAQJ,QAAS,kBAAMP,EAAMY,WAAWZ,EAAMM,OAAtE,YCsBSO,MAhDf,WAAe,IAAD,EAEkBZ,mBAAS,IAF3B,mBAELa,EAFK,KAEIC,EAFJ,OAGcd,mBAAS,CAAC,SAAU,UAAW,WAAY,WAAY,aAHrE,mBAGLe,EAHK,KAGEC,EAHF,OAIkBhB,mBAAS,MAJ3B,mBAILiB,EAJK,KAIIC,EAJJ,KAuBRC,EAAOJ,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACnB,yBAAKC,IAAKD,GACR,kBAAC,EAAD,CACEX,WAAY,kBATC,SAACW,GAClB,IAAME,EAAO,YAAOT,GACpBS,EAAQC,OAAOH,EAAG,GAClBN,EAASQ,GAMab,CAAWW,IAC7BI,WAAY,kBArBC,SAACJ,GAClB,IAAIK,EAAQ,YAAOZ,GACfa,EAAOD,EAASL,GACjBL,IACDU,EAASL,GAAKK,EAASV,GACvBU,EAASV,GAAWW,EACpBV,EAAWI,GACXN,EAASW,IAcWD,CAAWJ,IAC7BJ,WAAY,kBAAMA,EAAWI,IAC7BxB,MAAOiB,EACPV,IAAKiB,QAMX,OACE,yBAAKnB,UAAU,OACb,6CACA,4BAAKgB,GACL,6BACE,2BAAOZ,MAAOM,EAASgB,SAAU,SAAAC,GAAC,OAAIhB,EAAWgB,EAAEC,OAAOxB,UAC1D,4BAAQD,QAAS,SAAAwB,GAAC,OAAId,EAAS,GAAD,mBAAKD,GAAL,CAAYF,KAAUC,EAAW,MAA/D,UClCYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7fd3cd66.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css'\n\nfunction Items(props){\n  // const handleMove = props.handleMove()\n\n  const [quantity, setQuantity] = useState(1)\n\n  const handleIncrease = () => {\n    setQuantity(quantity+1)\n  };\n\n  const handleDecrease = () => {\n    setQuantity(quantity-1)\n  };\n\n  return(\n    <div className='item'>\n      <li \n        className='item' \n        cursor='pointer' \n        // onMouseDown={() => props.setGrabbed(props.Key)} \n        // onMouseUp={() => props.setGrabbed(null)}\n        // onMouseOver={() => handleMove(props.Key)}\n      >\n        {props.Items[props.Key]}\n      </li>\n      <button onClick={() => handleDecrease()}>-</button>\n      <input className='quantity' value={quantity} readOnly/>\n      <button onClick={() => handleIncrease(props.Key)}>+</button>\n      <button style={{margin: '5px'}} onClick={() => props.deleteItem(props.Key)}>remove</button>\n    </div>\n  )\n};\n\nexport default Items;","import React, { useState } from 'react';\nimport './App.css';\nimport Items from './Items';\n\nfunction App(){\n\n  const [newItem, setNewItem] = useState('')\n  const [items, setItems] = useState(['Apples', 'Bananas', 'Cherries', 'Tomatoes', 'Potatoes'])\n  const [grabbed, setGrabbed] = useState(null)\n\n  const handleMove = (i) => {\n    let newOrder = [...items]\n    let temp = newOrder[i]\n    if(grabbed){\n      newOrder[i] = newOrder[grabbed]\n      newOrder[grabbed] = temp\n      setGrabbed(i)\n      setItems(newOrder)\n    }\n  };\n\n  const deleteItem = (i) => {\n    const newList = [...items]\n    newList.splice(i, 1)\n    setItems(newList)\n  };\n\n  let list = items.map((item, i) => \n    <div key={i}>\n      <Items \n        deleteItem={() => deleteItem(i)}\n        handleMove={() => handleMove(i)} \n        setGrabbed={() => setGrabbed(i)} \n        Items={items} \n        Key={i}/>\n    </div>\n  )\n\n  // console.log(grabbed)\n\n  return (\n    <div className='App'>\n      <h1>Shopping list</h1>\n      <ol>{list}</ol>\n      <div>\n        <input value={newItem} onChange={e => setNewItem(e.target.value)}/>\n        <button onClick={e => setItems([...items, newItem])/setNewItem('')}>Add</button>\n      </div>\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}